import React, { useState } from 'react';
import { motion } from "framer-motion";
import { useInView } from 'react-intersection-observer';

const Gallery = () => {
  const [ref4, inView4] = useInView({ triggerOnce: true });

  const [currentIndex, setCurrentIndex] = useState(0);
  const images = [
    '/unnamed (5).png',
    '/unnamed (4).png',
    '/unnamed (3).png',
    '/unnamed (2).png',
    '/unnamed (1).png',
  ];

  const handleClickArrow = (direction) => {
    if (direction === 'left') {
      setCurrentIndex((prevIndex) => (prevIndex === 0 ? images.length - 1 : prevIndex - 1));
    } else {
      setCurrentIndex((prevIndex) => (prevIndex === images.length - 1 ? 0 : prevIndex + 1));
    }
  };

  return (
    <motion.div id='gallery-container'
    ref={ref4}
    initial={{
      opacity: 0,
      y: 40, // Move slightly down initially
    }}
    animate={{
      opacity: inView4 ? 1 : 0,
      y: inView4 ? 0 : 40,
    }}
    transition={{ duration: 0.6, ease: 'easeOut' }}
    >
      <div className="gallery-content">
        <h1>
          See the <span> app</span> in action
        </h1>
        <p>
          OllaCart uses a &quot;cart-system&quot; to help you manage what you are buying, sharing, and browsing. There are four carts - the shopping cart, the buying cart, the sharing cart, and the social cart.
        </p>
      </div>

      <div className="gallery-main">
        <div className="gallery-images">
          <div
            className="images-wrapper"
            style={{ transform: `translateX(-${currentIndex * 100}%)` }}
          >
            {images.map((src, index) => (
              <div className="image-item" key={index}>
                <img src={src} alt={`img ${index + 1}`} 
                width={1000} 
                height={1000}
                style = {{ objectFit:"cover" }}
                />
              </div>
            ))}
          </div>
        </div>
        <div className="gallery-controls">
        
          <div className="gallery-dots">
            {images.map((_, index) => (
              <span
                key={index}
                className={`dot ${currentIndex === index ? 'active' : ''}`}
                onClick={() => setCurrentIndex(index)}
              ></span>
            ))}
          </div>
          <div className="arrow-button">
          <button className="arrow left-arrow" onClick={() => handleClickArrow('left')}>
            <svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M19.9141 0.981934C16.0573 0.981934 12.2872 2.12559 9.08045 4.26828C5.87369 6.41096 3.37433 9.45645 1.89842 13.0196C0.422512 16.5828 0.0363465 20.5036 0.788758 24.2862C1.54117 28.0688 3.39837 31.5434 6.12549 34.2705C8.85261 36.9976 12.3272 38.8548 16.1098 39.6072C19.8924 40.3597 23.8132 39.9735 27.3764 38.4976C30.9396 37.0217 33.985 34.5223 36.1277 31.3156C38.2704 28.1088 39.4141 24.3387 39.4141 20.4819C39.4086 15.3119 37.3524 10.3552 33.6966 6.69938C30.0408 3.0436 25.0841 0.987393 19.9141 0.981934ZM19.9141 36.9819C16.6507 36.9819 13.4606 36.0142 10.7472 34.2012C8.03375 32.3881 5.9189 29.8112 4.67006 26.7962C3.42121 23.7812 3.09446 20.4636 3.73111 17.2629C4.36777 14.0623 5.93924 11.1222 8.24681 8.81467C10.5544 6.50711 13.4944 4.93563 16.6951 4.29898C19.8958 3.66232 23.2134 3.98908 26.2283 5.23792C29.2433 6.48677 31.8203 8.60161 33.6333 11.315C35.4464 14.0284 36.4141 17.2185 36.4141 20.4819C36.4091 24.8565 34.6691 29.0504 31.5759 32.1437C28.4826 35.237 24.2886 36.977 19.9141 36.9819ZM28.9141 20.4819C28.9141 20.8798 28.756 21.2613 28.4747 21.5426C28.1934 21.8239 27.8119 21.9819 27.4141 21.9819H16.0347L19.4753 25.4207C19.6147 25.56 19.7252 25.7255 19.8007 25.9076C19.8761 26.0897 19.9149 26.2848 19.9149 26.4819C19.9149 26.679 19.8761 26.8742 19.8007 27.0563C19.7252 27.2384 19.6147 27.4038 19.4753 27.5432C19.336 27.6826 19.1705 27.7931 18.9884 27.8685C18.8063 27.9439 18.6112 27.9828 18.4141 27.9828C18.217 27.9828 18.0218 27.9439 17.8397 27.8685C17.6576 27.7931 17.4922 27.6826 17.3528 27.5432L11.3528 21.5432C11.2134 21.4039 11.1027 21.2384 11.0272 21.0563C10.9517 20.8742 10.9129 20.6791 10.9129 20.4819C10.9129 20.2848 10.9517 20.0896 11.0272 19.9075C11.1027 19.7254 11.2134 19.56 11.3528 19.4207L17.3528 13.4207C17.6343 13.1392 18.016 12.9811 18.4141 12.9811C18.8121 12.9811 19.1939 13.1392 19.4753 13.4207C19.7568 13.7021 19.9149 14.0839 19.9149 14.4819C19.9149 14.88 19.7568 15.2617 19.4753 15.5432L16.0347 18.9819H27.4141C27.8119 18.9819 28.1934 19.14 28.4747 19.4213C28.756 19.7026 28.9141 20.0841 28.9141 20.4819Z" fill="#FFC827"/>
            </svg>
          </button>
          <button className="arrow right-arrow" onClick={() => handleClickArrow('right')}>
            <svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M19.9141 0.981934C16.0573 0.981934 12.2872 2.12559 9.08045 4.26828C5.87369 6.41096 3.37433 9.45645 1.89842 13.0196C0.422512 16.5828 0.0363465 20.5036 0.788758 24.2862C1.54117 28.0688 3.39837 31.5434 6.12549 34.2705C8.85261 36.9976 12.3272 38.8548 16.1098 39.6072C19.8924 40.3597 23.8132 39.9735 27.3764 38.4976C30.9396 37.0217 33.985 34.5223 36.1277 31.3156C38.2704 28.1088 39.4141 24.3387 39.4141 20.4819C39.4086 15.3119 37.3524 10.3552 33.6966 6.69938C30.0408 3.0436 25.0841 0.987393 19.9141 0.981934ZM19.9141 36.9819C16.6507 36.9819 13.4606 36.0142 10.7472 34.2012C8.03375 32.3881 5.9189 29.8112 4.67006 26.7962C3.42121 23.7812 3.09446 20.4636 3.73111 17.2629C4.36777 14.0623 5.93924 11.1222 8.24681 8.81467C10.5544 6.50711 13.4944 4.93563 16.6951 4.29898C19.8958 3.66232 23.2134 3.98908 26.2283 5.23792C29.2433 6.48677 31.8203 8.60161 33.6333 11.315C35.4464 14.0284 36.4141 17.2185 36.4141 20.4819C36.4091 24.8565 34.6691 29.0504 31.5759 32.1437C28.4826 35.237 24.2886 36.977 19.9141 36.9819ZM28.4753 19.4207C28.6148 19.56 28.7254 19.7254 28.8009 19.9075C28.8764 20.0896 28.9152 20.2848 28.9152 20.4819C28.9152 20.6791 28.8764 20.8742 28.8009 21.0563C28.7254 21.2384 28.6148 21.4039 28.4753 21.5432L22.4753 27.5432C22.1939 27.8246 21.8121 27.9828 21.4141 27.9828C21.016 27.9828 20.6343 27.8246 20.3528 27.5432C20.0714 27.2617 19.9132 26.88 19.9132 26.4819C19.9132 26.0839 20.0714 25.7021 20.3528 25.4207L23.7934 21.9819H12.4141C12.0162 21.9819 11.6347 21.8239 11.3534 21.5426C11.0721 21.2613 10.9141 20.8798 10.9141 20.4819C10.9141 20.0841 11.0721 19.7026 11.3534 19.4213C11.6347 19.14 12.0162 18.9819 12.4141 18.9819H23.7934L20.3528 15.5432C20.0714 15.2617 19.9132 14.88 19.9132 14.4819C19.9132 14.0839 20.0714 13.7021 20.3528 13.4207C20.6343 13.1392 21.016 12.9811 21.4141 12.9811C21.8121 12.9811 22.1939 13.1392 22.4753 13.4207L28.4753 19.4207Z" fill="#FFC827"/>
            </svg>
          </button>
          </div>
       
        </div>
      </div>
    </motion.div>
  );
};

export default Gallery;
